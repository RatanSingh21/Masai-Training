Java and MySQL
    -- >> Enterprise level Application

Serialization and Deserialization
    1. Maintaining the data -->> In memory
    2. Processing the data
    3. Showing the data

disadvantages of Serialization and Deserialization

Bridge, translator : Between DB and Program --- >> JDBC

JDBC ??
it is a JAR FILE, it is very expensive resource

Banking
100s of files: bundled up in a jar file
.java --> compile --> .class file --> zip together -> Jar File

banking app (user.java , transaction.java ,,,,)

class multithreading{

}

client, server
backend application -->> banking app (client) --> mysql (server)

JDBC Client:

Step-by-step guide to use JDBC Client
1. First af all integrate the jar file to your class path
2. Connection established
3. SQL Query submit
4. Execution done by SQL SERVER
5. Response from the server
6. Process the data received from server
7. Deal with exceptions
8. Closing the connection


RESULT CONCEPT I.E BF LIST , AF LIST and in between is one record

PREPARED STATEMENT
CURSOR
2 possible scenarios for resultset
    1. when we get exactly 0 or 1 row: primary key ( query on primary key )
    2. when we can get more 1 : we use while loop


Responsibility of the Developers
    - Write source code(bunch of classes, interfaces, exceptions....)
    - Adding external dependencies to the code
    - compiling the code
    - testcases (Junit, mockito, sonar)
    - compilation with the test case
    - Arrange code in structured manner
    - Packaging: Build
    - Deploy

ANT Apache : (Problems with this )
    - Dependency management
    - Lifecycle maintenance issue
    - XML File reliability

Maven Terms
    - Artifact : outcome of a maven tool, jar file , war file
    - Archetype : Maven template (using existing template / project)
    - Group id: (com.hdfclife) unique identifier for the Artifact of a particular org(com.hdfclife)
    - Artifact id: Unique id of an artifact
    - pom.xml : Most important file of our project ( dependencies management )

POM: Project object model

Maven Repository :
    1. Central Repo - maintained by maven developers / security issues
    2. Remote Repo - Org level
    3. Local Repo -

Maven Lifecycle :
    1. Validate: validate the project structure like pom file spelling , tags and all
    2. Compile: Compile the source code, download the dependencies
    3. test compile: compilation of the test case.
    4. Test: run the test cases
    5. Package : bundle the code into a jar file inside target folder
    6. Deploy ( optional )
    7. Clean :delete and remove the previous build data


Layer Architecture:
    1. Maintaining the business data
    2. Processing the data
    3. Presenting it to the client in a user understandable format

Application {
    - Data Access Logic : Communicating with the DB
    - Business Logic : Performing Logical Operation
    - Presentation Logic : Displaying the info to the client
}

What if we don't follow this architecture ?
    - Modification will be tough ,because code won't be organized
    - Testing will also be tough
    - Collaboration will also be tough

    1. Presentation Layer
    2. Service Layer (Business layer)
    3. Data Access Layer

ORM (Object Relational Mapping)
Data Access Layer

Java Persistence ( not a ORM but uses for implementation )

    - DB stores Primitives values (hence we use serialization and de but not used )
    - The process of saving the state of object: PERSISTENCE
    - Serialization
    - JDBC takes sql queries in the form of string  ( below disadvantages )
        - Managing connection
        - Exception managements

    ORM types -> Hibernates, Toplink, etc....
    - Standard API implementation for all the ORMS's
    - JPA won't change specification if ORM changes

    JPQL (Java Persistence Query Languages )

Business level Application :
    - J2SE : CORE JAVA
    - J2EE : SPRING BOOT FOR Enterprise Application
    - J2ME : For IoT and all

Business Layer is created by:
    J2EE: Specification (implementation of application server software )
    JDBC : JDBC Driver Software
    JPA : Implementation of ORM software

Enterprise Challenges:
    1. Data Security: Secured
    2. Protocols
    3. Transaction ( either everything or nothing )
    4. Logging
    5. Messaging
    6. Mailing
    etc...

Frameworks(F/W) popular ones
    .net
    J2EE

Bean Class --

Application Server (comms with clients via various protocols): It has
     1. WebServer: subset of Application Server example tomcat
            WebServer VS App Serv
                - Web server is a subset of App server
                - web server jas JSP/ Servlets
     2. EJB Container ( comms with database, heavy weight , more robust ) + Webserver ( comms via only HTTP protocols , less robust and lightweight )= Application Server
            CONTAINERS -- Provides an virtual Environment



