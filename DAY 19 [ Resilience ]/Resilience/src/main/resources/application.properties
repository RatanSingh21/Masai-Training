spring.application.name=Resilience

server.port=8080

# Swagger Configuration
    springdoc.swagger-ui.path=/swagger-ui.html
    springdoc.api-docs.path=/v3/api-docs

# Database Configuration
    spring.datasource.url=jdbc:postgresql://localhost:5432/Resilience
    spring.datasource.username=RATANS
    spring.datasource.password=password
    spring.datasource.driver-class-name=org.postgresql.Driver

# ORM Configuration
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Use PathPatternParser for URL matching
    spring.mvc.pathmatch.matching-strategy=PathPatternParser

# to see all filters in action --->> Logging DEBUG is enabled for spring security
    logging.level.org.springframework.security=DEBUG

# Logging Configuration
 logging.level.root=INFO
    logging.level.in.ratansgh.resilience=TRACE
    logging.file.name=Resilience/Logs/application.log
    logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
    logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
    logging.file.max-size=10MB
    logging.file.max-history=1000

# Health And Metrics Configuration

    # expose all the endpoint for monitoring
    management.endpoints.web.exposure.include=*

    # show health details all the time
    management.endpoint.health.show-details=always

# Rate Limiting Configuration

    # Only 2 requests to RegisterUser are allowed every 5 seconds.
    # If more than 2 requests arrive within 5 seconds, extra requests are instantly rejected (no waiting).

    resilience4j.ratelimiter.instances.GetUsers.limit-for-period=2
    resilience4j.ratelimiter.instances.GetUsers.limit-refresh-period=5s
    resilience4j.ratelimiter.instances.GetUsers.timeout-duration=0ms

# To confirm if the rate limiter is being triggered
    logging.level.io.github.resilience4j=DEBUG

# Circuit Breaker Configuration

    # Circuit Breaker for MyCircuitBreaker API

    # Enables a health indicator for the MyCircuitBreaker instance, allowing its status to be exposed via Spring Boot Actuator endpoints.
    resilience4j.circuitbreaker.instances.MyCircuitBreaker.register-health-indicator=true

    # Configures the circuit breaker to use a count-based sliding window, which means it will consider a fixed number of recent calls to determine its state.
    resilience4j.circuitbreaker.instances.MyCircuitBreaker.sliding-window-type=COUNT_BASED

    # Sets the failure rate threshold to 50%, meaning that if 50% or more of the calls in the sliding window fail, the circuit breaker will transition to the OPEN state.
    resilience4j.circuitbreaker.instances.MyCircuitBreaker.failure-rate-threshold=50

    # Specifies that the circuit breaker will remain in the OPEN state for 10 seconds before transitioning to the HALF_OPEN state to test if the underlying issue has been resolved.
    resilience4j.circuitbreaker.instances.MyCircuitBreaker.wait-duration-in-open-state=10s

    # Defines the size of the sliding window to 5 calls, meaning the circuit breaker will evaluate the last 5 calls to determine its state.
    resilience4j.circuitbreaker.instances.MyCircuitBreaker.sliding-window-size=5
