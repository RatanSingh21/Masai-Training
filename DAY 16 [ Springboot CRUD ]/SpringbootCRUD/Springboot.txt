-----------------------     Annotation based Configuration     ---------------------------

Spring framework used XML based configuration to manage beans and dependency injection. In XML configuration, beans are explicitly defined in an XML file, and their dependencies are wired through XML tags.

Annotations can be implemented at following levels:
    - Class
    - Method
    - Constructor
    - Attribute
We need to create a Config.Class file and use AnnotationConfigApplicationContext for configuring it also, here Beans are singleton in nature.

Type of Annotations:
1. Stereotype Annotation: Define roles like service, repository, and component
    - @Service, @Repository, @Component, @Controller,
2. Autowiring Annotation: Does Dependency injections
    - @Autowired -- works only on non-primitive date type

Qualifier Annotation: To solve ambiguity when multiple beans of the same type exist.Pass the bean name.
Scope Annotation:
Value Annotation: Used to inject primitive data type.
Bean annotation: Used to inject collection dependencies

-----------------------     Spring boot      ---------------------------

- Spring Boot simplifies Spring application development by autoconfiguring components and minimizing XML configuration.
- Key benefits:
    1. Autoconfiguration
    2. Embedded server (Tomcat)
    3. Starter dependencies
    4. Devtools for live reload
    5. Easier setup

Request Parameters in REST APIs:

    Spring Boot supports different ways to get input data from HTTP requests:
        - @PathVariable: Extracts variables from the URI path.
        - @RequestParam: Extracts query parameters from the URL.
        - @RequestBody: Binds the HTTP request body to a Java object.

Webservice vs Web Application:
    - Web Application: Provides user interface (HTML, CSS, JavaScript) enabling users to interact.
    - Web Service: Provides raw data (usually JSON or XML) for communication between systems or with front-end apps.

Status codes: 200 OK, 404 Not Found, 400 Bad Request, 500 Internal Server Error.

HTTP Protocol: Communication guideline between client and servers.

Request Parameters in REST APIs
    - @PathVariable: For URI templating parameters, typically resource identifiers (e.g., /students/{rollNumber}).
    - @RequestParam: For query parameters, used to pass key-value pairs (e.g., filtering, pagination).
    - @RequestBody: For receiving complex object data, typically JSON payload in POST/PUT requests.

Webservices: RAW data
    - RESTFUL
    - SOAP

ResponseEntity allows building HTTP responses with control over status code, headers, and body.
Always send response entity because it helps to play with header...
